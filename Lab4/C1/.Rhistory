library(readr)
dados <- read_csv("~/AnaliseDados/Lab4/C1/dados.csv")
View(dados)
library(readr)
dados <- read_csv("~/AnaliseDados/Lab4/C1/dados.csv")
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
install.packages('resample')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv")
lastfm = na.omit(dados)
glimpse(lastfm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
glimpse(lastfm)
glimpse(lastfm)
View(dados)
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py"))
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py"))
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py")) %>%
group_by("file_extension")
View(dados)
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py")) %>%
group_by("month_day")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py"))
a = ((12 - dados.the_month) / 10);
View(dados)
a = ((12 - dados$the_month) / 10);
b = dados.the_year - a;
a = ((12 - dados$the_month) / 10);
b = dados$the_year - a;
c = dados$the_month + (12 * a);
d = b / 100;
e = d / 4;
f = 2 - d + e;
g = (int) (365.25 * b);
a = ((12 - dados$the_month) / 10);
b = dados$the_year - a;
c = dados$the_month + (12 * a);
d = b / 100;
e = d / 4;
f = 2 - d + e;
g = (365.25 * b);
h = (int) (30.6001 * (c + 1));
a = ((12 - dados$the_month) / 10);
b = dados$the_year - a;
c = dados$the_month + (12 * a);
d = b / 100;
e = d / 4;
f = 2 - d + e;
g = (365.25 * b);
h = (30.6001 * (c + 1));
i = ((f + g) + (h + dados$month_day) + 5);
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py")) %>%
group_by(file_extension)
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py")) %>%
group_by(the_year)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample) # <-- Para bootstrap!
library(GGally)
theme_set(theme_bw())
dados  = read_csv("dados.csv") %>%
filter(file_extension %in% c("js", "py")) %>%
group_by(the_year) %>%
mutate(wordsm = sum(users))
View(dados)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(gridExtra)
library(ggplot2)
library(plotly)
char <- read.csv('character_list5.csv')
names(char)
filmes <- read.csv('meta_data7.csv')
names(filmes)
dados = filmes %>% left_join(char)
#Removendo colunas irrelevantes
dados <- dados[ -c(2, 5, 10) ]
# Criando o data frame apenas com as personagens femininas e adicionando as colunas necessarias
dados_f <- dados %>% filter(gender == 'f')
dados_f <- dados_f %>% group_by(title, gender) %>% mutate(countf = n())
dados_f <- dados_f %>% group_by(title) %>% mutate(wordsf = sum(words))
# Criando o data frame apenas com os personagens masculinos e adicionando as colunas necessarias
dados_m <- dados %>% filter(gender == 'm')
dados_m <- dados_m %>% group_by(title, gender) %>% mutate(countm = n())
dados_m <- dados_m %>% group_by(title) %>% mutate(wordsm = sum(words))
# Removendo colunas que nao serao utilizadas
dados_f <- dados_f[ -c(4:7)]
dados_m <- dados_m[ -c(4:7)]
# Juntando os dados parar criar o conjunto de dados final
dados <- dados_f %>% left_join(dados_m)
dados <- unique(dados)
# Renomeando as variaveis
names(dados)[names(dados)=="script_id"] <- "Id"
names(dados)[names(dados)=="title"] <- "Filme"
names(dados)[names(dados)=="year"] <- "Ano"
names(dados)[names(dados)=="wordsf"] <- "Palavras.Ditas.por.Mulheres"
names(dados)[names(dados)=="wordsm"] <- "Palavras.Ditas.por.Homens"
names(dados)[names(dados)=="countf"] <- "Numero.de.Mulheres"
names(dados)[names(dados)=="countm"] <- "Numero.de.Homens"
# Excluindo os NA
dados <- na.omit(dados)
names(dados)
ggplot(dados, aes(Ano,Numero.de.Mulheres, color = Palavras.Ditas.por.Mulheres, text = Filme)) + labs(title = "Numero de Mulheres em Filmes por Ano") + geom_jitter() + scale_color_gradient(low="#efa0a3", high="#bc0007")
ggplot(dados, aes(Ano,Numero.de.Homens, color = Palavras.Ditas.por.Homens, text = Filme)) + labs(title = "Numero de Homens em Filmes por Ano") + geom_jitter() + scale_color_gradient(low="#f49fdc", high="#7a0258")
dados1 <- dados %>% group_by(Ano) %>% mutate(medianaM = median(as.numeric(Numero.de.Mulheres)), medianaH = median(as.numeric(Numero.de.Homens)), MedFalaM = median(as.numeric(Palavras.Ditas.por.Mulheres)), MedFalaH = median(as.numeric(Palavras.Ditas.por.Homens)) )
dados1 <- dados1[-c(1,2,4:7)]
dados1 <- unique(dados1)
p <- ggplot(dados1, aes(Ano, medianaM)) + labs(title = "Mediana do N?mero de Mulheres em Filmes por Ano") + geom_line(color = "#597db7") + labs(y = "Mediana de Personagens Mulheres")
p1 <- ggplot(dados1, aes(Ano,MedFalaM)) + labs(title = "Mediana do N?mero de Falas Femininas em Filmes por Ano") + geom_line(color = "#7dcadb") + labs(y = "Mediana de Falas Femininas")
ggplotly(p, width = 800, height = 500)
ggplotly(p1, width= 800, height = 500)
dados.agrup <- dados[-c(1,2)]
set.seed(44)
wss <- (nrow(dados.agrup)-1)*sum(apply(dados.agrup,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(dados.agrup,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# Nesse caso 3 eh visto como o numero apropriado entao:
# Clustering
dadosCluster <- kmeans(dados.agrup, 3, nstart = 40)
aggregate(dados.agrup,by=list(dadosCluster$cluster),FUN=mean)
# append cluster
dados.agrup <- data.frame(dados.agrup, dadosCluster$cluster)
names(dados.agrup)[names(dados.agrup)=="dadosCluster.cluster"] <- "cluster"
p1 <- dados.agrup %>% filter(cluster=='1') %>%
plot_ly(type = 'parcoords',
line = list(color ="#c97cc4"),
dimensions = list(
list(range = c(1,16),
label = 'Numero de Mulheres', values = ~Numero.de.Mulheres),
list(range = c(101,26000),
label = 'Palavras Ditas por Mulheres', values = ~Palavras.Ditas.por.Mulheres),
list(range = c(1,30),
label = 'Numero de Homens', values = ~Numero.de.Homens),
list(range = c(101,57950),
label = 'Palavras Ditas por Homens', values = ~Palavras.Ditas.por.Homens)
)
)
p2 <- dados.agrup %>% filter(cluster=='2') %>%
plot_ly(type = 'parcoords',
line = list(color ="#ef5d8b"),
dimensions = list(
list(range = c(1,16),
label = 'Numero de Mulheres', values = ~Numero.de.Mulheres),
list(range = c(101,26000),
label = 'Palavras Ditas por Mulheres', values = ~Palavras.Ditas.por.Mulheres),
list(range = c(1,30),
label = 'Numero de Homens', values = ~Numero.de.Homens),
list(range = c(101,57950),
label = 'Palavras Ditas por Homens', values = ~Palavras.Ditas.por.Homens)
)
)
p3 <- dados.agrup %>% filter(cluster=='3') %>%
plot_ly(type = 'parcoords',
line = list(color ="#9961c6"),
dimensions = list(
list(range = c(1,16),
label = 'Numero de Mulheres', values = ~Numero.de.Mulheres),
list(range = c(101,26000),
label = 'Palavras Ditas por Mulheres', values = ~Palavras.Ditas.por.Mulheres),
list(range = c(1,30),
label = 'Numero de Homens', values = ~Numero.de.Homens),
list(range = c(101,57950),
label = 'Palavras Ditas por Homens', values = ~Palavras.Ditas.por.Homens)
)
)
p1
p2
p3
View(dados_f)
View(dados_f)
View(dados.agrup)
